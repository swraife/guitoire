.feat-form__wrapper
  = form_for @feat, html: { class: 'disable-on-submit', id: 'feat_form'} do |f|
    .feat-owner{class: "#{'hide' unless performer_has_groups(current_performer)}"}
      = f.label :owner
      = f.select :global_owner, options_from_collection_for_select(current_performer.actors, :global_id, :public_name, @feat.owner&.global_id)

    = f.label :name
    = f.text_field :name
    .feat__duplicates-wrapper.hide
      Possible duplicates:
      - @feats.each do |feat|
        .feat__duplicate-link.hide{id: "feat_id_#{feat.id}"}
          = link_to feat.name, feat_path(feat)
          = ', '

    = f.label :description
    = f.text_area :description

    - current_performer.actors.each do |actor|
      .feat__actor-fields{ id: "actor-fields-#{actor.global_id}" }
        = f.label 'Tags'
        = f.select :generic_list, options_from_collection_for_select(feat_tag_options(actor, 'generics'), :name, :translate_name, @feat.generic_list), {include_blank: true}, {multiple: true, class: 'add-select2 tag-field'}

        - if actor == current_performer
          = f.label 'Private Tags'
          = fields_for @feat_role do |ff|
            = ff.select :private_list, options_for_select(current_performer.feat_role_tags('private'), @feat_role.private_list), {include_blank: true}, {multiple: true, class: 'add-select2'}

        - actor.feat_contexts&.each do |context, context_name|
          - unless @feat.custom_contexts.include?(context) || context == 'generics'
            = f.label context_name
            = select_tag "custom_contexts[#{context}]",
                         options_for_select(actor.feat_tags(context) | @feat.tags_on(context), @feat.tag_list_on(context)), {include_blank: true, multiple: true, class: 'add-select2 tag-field'}

        - @feat.custom_contexts.each do |context|
          - existing_tags = @feat.tag_list_on(context)
          - if existing_tags.present? && context != 'generics'
            = f.label t("skill_names.#{context}", default: context)
            = select_tag "custom_contexts[#{context}]",
                         options_for_select(actor.feat_tags(context).pluck(:name) | existing_tags, @feat.tag_list_on(context)),
                         {include_blank: true, multiple: true, class: 'add-select2 tag-field'}

    = f.label 'Admin Users'
    = f.select :admin_performer_ids, options_from_collection_for_select(@followed, :id, :name_and_username, @feat.admin_performers.pluck(:id)), {include_blank: true}, {multiple: true, class: 'add-select2'}

    = f.label 'Admin Groups'
    = f.select :admin_group_ids, options_from_collection_for_select(current_performer.admin_groups, :id, :name, @feat.admin_groups.pluck(:id)), {include_blank: true}, {multiple: true, class: 'add-select2'}

    = f.label 'Visible To:'
    - default_visibility = @feat.persisted? ? @feat.visibility : current_performer.visibility
    = f.select :visibility, options_for_select(enum_select_options(Feat, 'visibilities'), default_visibility)

    - if @copiable_feat && @copiable_feat.resources.present?
      = f.label "Do you want to add all #{@copiable_feat.resources.count} links and attachments?"
      = radio_button_tag :copy_resources, @copiable_feat.id, checked: true
      = label_tag 'Yes', nil, class: 'inl-block'
      = radio_button_tag :copy_resources, false
      = label_tag 'No', nil, class: 'inl-block'

    %br

    = f.submit 'Save', class: 'save-feat-btn'

:javascript
  // var feats = #{@feats.reject { |feat| feat == @feat }.map { |feat| [feat.id, feat.name.downcase, feat_path(feat)] } };

  $(document).ready(function() { 
    $('.feat__duplicate-link').hide();
    displayCustomContexts($('#feat_global_owner').val());

    // $('.save-feat-btn').click(function(e) {
    //   var featName = $('#feat_name').val().toLowerCase();

    //   var matches = feats.filter(function(i) {
    //     return i[1] == featName
    //   });

    //   if (matches.length > 0) {
    //     if (!confirm("Are you sure this isn't a duplicate?")) {
    //       e.preventDefault();
    //     }
    //   }
    // });

    $('#feat_form').submit(function() {
      var globalOwner = $('#feat_global_owner').val();
      $('.tag-field').not($('#actor-fields-' + globalOwner + ' .tag-field')).val('');
    });

    $('#feat_global_owner').change(function() {
      var globalOwner = $(this).val();
      displayCustomContexts(globalOwner);
    });
  });

  function displayCustomContexts(globalOwner) {
    $('.feat__actor-fields').hide();
    $('#actor-fields-' + globalOwner).show();
  }
